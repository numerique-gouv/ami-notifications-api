"""Registration label, enabled and created_at fields

Revision ID: 10d8c5919437
Revises: ed5c27a3498d
Create Date: 2025-06-30 10:58:22.228157

"""

import uuid
from datetime import datetime
from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.orm import Session

from app.models.database import Registration

# revision identifiers, used by Alembic.
revision: str = "10d8c5919437"
down_revision: Union[str, None] = "ed5c27a3498d"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    op.add_column(
        "registration", sa.Column("enabled", sa.Boolean(), nullable=False, server_default="0")
    )
    op.add_column(
        "registration",
        sa.Column("created_at", sa.DateTime(), nullable=False, server_default=str(datetime.now())),
    )
    # Special case for the label: we want to initialize it with a random uuid for each entry.
    op.add_column("registration", sa.Column("label", sa.VARCHAR(), nullable=True))
    conn = op.get_bind()
    session = Session(bind=conn)
    for registration in session.query(Registration):
        registration.label = str(uuid.uuid4())
    session.commit()
    op.alter_column("registration", "label", nullable=False)


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column("registration", "created_at")
    op.drop_column("registration", "enabled")
    op.drop_column("registration", "label")
    # ### end Alembic commands ###
